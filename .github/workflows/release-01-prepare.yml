name: Release - Changelog

on:
  push:
    branches:
      # Those are in use today
      - statemine-v[0-9]+
      - polkadot-v[0-9]+.[0-9]+.[0-9]+

      # This is how it should become
      - release-cumulus-v[0-9]+.[0-9]+.[0-9]+
      - release-parachains-v[0-9]+.[0-9]+.[0-9]+

jobs:
  tag_rc:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - id: compute_tag
        name: Compute next rc tag
        shell: bash
        run: |
          # Get last rc tag if exists, else set it to {version}-rc1
          version=${GITHUB_REF#refs/heads/release-}
          echo "$version"
          echo "::set-output name=version::$version"
          git tag -l
          last_rc=$(git tag -l "$version-rc*" | sort -V | tail -n 1)
          if [ -n "$last_rc" ]; then
            suffix=$(echo "$last_rc" | grep -Eo '[0-9]+$')
            echo $suffix
            ((suffix++))
            echo $suffix
            echo "::set-output name=new_tag::$version-rc$suffix"
            echo "::set-output name=first_rc::false"
          else
            echo "::set-output name=new_tag::$version-rc1"
            echo "::set-output name=first_rc::true"
          fi
      - name: Apply new tag
        uses: tvdias/github-tagger@v0.0.2
        with:
          # We can't use the normal GITHUB_TOKEN for the following reason:
          # https://docs.github.com/en/actions/reference/events-that-trigger-workflows#triggering-new-workflows-using-a-personal-access-token
          # RELEASE_BRANCH_TOKEN requires public_repo OAuth scope
          repo-token: "${{ secrets.RELEASE_BRANCH_TOKEN }}"
          tag: ${{ steps.compute_tag.outputs.new_tag }}

      - id: create-issue
        uses: JasonEtco/create-an-issue@v2
        # Only create the issue if it's the first release candidate
        if: steps.compute_tag.outputs.first_rc == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VERSION: ${{ steps.compute_tag.outputs.version }}
        with:
          filename: .github/ISSUE_TEMPLATE/release.md

      # - name: Send Matrix message
      #   uses: s3krit/matrix-message-action@v0.0.3
      #   if: steps.create-issue.outputs.url != ''
      #   with:
      #     room_id: ${{ secrets.INTERNAL_POLKADOT_MATRIX_ROOM_ID }}
      #     access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
      #     server: "matrix.parity.io"
      #     message: "Release process for Cumulus ${{ steps.compute_tag.outputs.version }} has been started. Tracking issue: ${{ steps.create-issue.outputs.url }}"

  create_draft:
    needs: ["changelog"]
    name: Create Draft
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create-release.outputs.html_url }}
      asset_upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get Release Version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV
      - uses: actions/download-artifact@v2

      - name: Install tera v0.1.3
        run: |
          URL=https://github.com/chevdor/tera-cli/releases/download/v0.1.3/tera-cli_linux_amd64.deb
          wget $URL
          sudo dpkg -i tera-cli_linux_amd64.deb
          tera --version

      - name: Generate changelog
        id: change_log
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 ${{ env.RELEASE_VERSION }}^ )
          JSON=$(git log $LAST_TAG..HEAD \
            --pretty=format:'{ "commit": "%H", "short_sha": "%h", "author": "%an", "date": "%ad", "message": "%s"},' \
            $@ | \
            perl -pe 'BEGIN{print "{ \"since\": \"'${LAST_TAG}'\",  \"commits\": ["}; END{print "]}"}' | \
            perl -pe 's/},]/}]/')
          echo $JSON | tera --template templates/changelog.md --stdin > changelog.md

      - name: Render release notes
        run: |
          export CHANGELOG=$(cat changelog.md)
          tera --env --env-only --template templates/release.md > RELEASE_NOTES.md

      - name: Create Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: Subwasm ${{ env.RELEASE_VERSION }} (${{ env.SHORT_SHA }})
          body_path: ./RELEASE_NOTES.md
          draft: true

  publish-binaries:
    runs-on: ubuntu-latest
    needs: ["create_draft"]
    steps:
      - uses: actions/checkout@v2
      - name: Get Release Version
        run: |
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
          echo "SHORT_SHA=${GITHUB_SHA::8}" >> $GITHUB_ENV

      - uses: actions/download-artifact@v2

      - name: Upload Debian package
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.asset_upload_url }}
          asset_path: "linux/subwasm_linux_amd64.deb"
          asset_name: "subwasm_linux_amd64_${{ env.RELEASE_VERSION }}.deb"
          asset_content_type: application/vnd.debian.binary-package

      - name: Upload MacOS archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_draft.outputs.asset_upload_url }}
          asset_path: "macos/subwasm_macos.tar.gz"
          asset_name: "subwasm_macos_${{ env.RELEASE_VERSION }}.tar.gz"
          asset_content_type: application/gzip
